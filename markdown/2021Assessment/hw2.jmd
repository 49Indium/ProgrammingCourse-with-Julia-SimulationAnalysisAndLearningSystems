# Homework \#2 - Semester 2, 2021.
(last edit: Aug 7, 2021)

**Due:** End of Day, Friday, August 27, 2021. Late submissions are not accepted.

**Note:** The teaching staff will only answer questions (via Piazza, consultation hour, or practicals) regarding this assignment up to the late evening of Wednesday August 25.

**Weights and marking criteria:** Total number of points: **100**. There are **10** points for handing in according to the hand-in instructions, including a voice recording, and neat output. There are **10** additional points for setting up the GitHub repo properly. More on this below. The remaining 80 points are distributed among the five questions based on difficulty **(10, 15, 10, 15, 15, 15)**. See the [general submission instructions information](https://courses.smp.uq.edu.au/MATH2504/#hand-in).

**Submission format:** This assignment should be submitted via a GitHub Repo and a PDF file via Blackboard. 

Specific instructions for the GitHub repo are below. It is important that the GitHub repo be made **private** and the course user name `uqMATH2504` be invited as a collaborator. It is also important to name the repo exactly as `<<FIRST NAME>>-<<LAST NAME>>-2504-2021-HW2`. So for example if your name is "Jeannette Young", the repo name should be `Jeannette-Young-2504-2021-HW2`.

The PDF file should be a nice formatted file that has:

* Your name, student number, and assignment title (HW2 - 2021) on the top.
* A (clickable) link to your GitHub repo.
* The code and output should be presented sequentially for each question. I.e. question 1's code and output, followed by question 2's code and output, etc... 

The recommended way to make the PDF file is via a Jupyter notebook where you copy in some code and output into the notebook, and in certain cases use `include()` to run Julia code if appropriate. If desired you could keep this jupyter notebook (`.ipynb` file) in the repo. However, this Jupyter notebook will not be checked (only the PDF file), and it isn't required to be a "runnable" notebook. In any case, please avoid pixilated screenshots of code, so for example if you choose to format your PDF file in MS-word (instead of Jupyter), make sure the code is clean, formatted, and readable. 

Marking responses will be made by the teaching staff by annotating **selected parts** of your PDF file via blackboard. Hence a very readable and clean PDF file is important. Note that in printing Jupyter to PDF (or exporting to PDF) there may sometimes be excessive white space. Do not worry about this extra white space; it is not a problem.

**Individual work**: This is an individual work assignment. Plagiarism will not be accepted. Nevertheless, feel free to consult with friends or classmates via Piazza and other means about how to go about certain tasks.

**Marking Criteria**: 

* 10 points are allocated for following instructions. 

* 10 points are allocated for setting up the GitHub hand-in according to the instructions.

* Each question is then marked based on correctness.

* As this is the second assignment, points **will be** deducted for sloppy coding style. Make sure to have your code properly indented, to use sensible and consistent variable names, and to write code that is in general clean and consistent. 

---

## Setting up your GitHub repo for hand-in (10pts):

* Create your GitHub account if you don't have one. 
* Create a new repo for this assignment. Name the repo exactly as `<<FIRST NAME>>-<<LAST NAME>>-2504-2021-HW2`. So for example if your name is "Jeannette Young", the repo name should be `Jeannette-Young-2504-2021-HW2`.
* Make sure the repo is **private**.
* Invite the course GitHub user, `uqMATH2504` as a collaborator. You may do so early on while working on the assignment, and must do this no later than the assignment due date.
* Do **not** make any changes (commits) to the repo after the assignment due date. 
* Create a local clone of the repo. It is recommended that use use `git` command line via the shell to work on making changes/additions to the assignment and submitting the changes. However you are free to use any other mechanism (VS-Code, GitHub desktop, etc).
* If for some reason you are not able or willing ot use GitHub an alternative is GitLab. This is not recommended as it adds additional work to the teaching staff, however if you wish to use GitLab instead of GitHub contact the teaching staff for permission.

Your GitHub repo should be formatted as exactly as follows:
* Have a `README.md` file which states your name, the assignment title, and has a (clickable) link to the assignment instructions on the course website (to this document). 
* Have a `LICENSE.md` file. Choose a license as you wish (for example the MIT license). However keep in mind that you must keep the submission private until the end of the semester.
* Have a `.gitignore` file. 
* Have a `src` directory and in it have 6 additional directories named `q1`, `q2`,...,`q6`. In each such directory (except for `q1`). Have a single Julia source file named `q<<X>>_solution.jl` where `<<X>>` is one of (`2`,`3`,...,`6`). This file should be runnable via `julia q<<X>>_solution.jl`. So for example if the teaching staff downloads your submission repo. It can run from the main repo directory:
```
julia src/q3/q3_solution.jl
```
and this will produce your output for question 3. 

Note that question 1 is clearly different as it requires you to show evidence of using a few unix commands. For this question just have `q1_solution.txt` as a file in `src/q1/`.

In the future projects you will also need to worry about a `Project.toml` and `Manifest.toml` file in the repo so that your assignment describes the packages you used. However in this assignment you do not need to worry about that.

* Note: make sure that there aren't any files in your submission repo except for those mentioned above (with the exception of perhaps a Jupyter `.ipynb` file if you choose to use it for creating the PDF). Use may use the `.gitignore` file to ensure `git` does not commit additional files and output files to your `repo`.

## Question 1 (10pts): A few unix commands

In this question you will manipulate a few files via Unix command line. If you are using Windows, it is best you do it via GitBash. If you are using Linux or Mac, just use the shell. For the question create a folder `hw2_q1` and make sure that `hw2_q1` is your working directory in the terminal/shell/command-line via `cd`. You will then use the commands `ls`, `pwd`, `cd`, `cp`, `mv`, `rm` (be careful with `rm`), `cat`, and `echo`. You'll also use output redirection to file (`>`).

Your submission should be comprised of the text from the shell including the commands you used and the outputs. Just get it by copying the shell text and pasting in a file.

**1a**: Create the folder `hw2_q1` and make that your working directory in the shell. Illusrate this via `pwd`.

**1b**: Display your name to the terminal using the `echo` command.

**1c**: Repeat and use output redirection (`>`) to send the output of the echo command to a file `my_name.txt`.

**1d**: Display the contents of the file using the `cat` command.

**1e**: Inspect the length of the file using `ls`. Make sure to use a flag for `ls` so as to see the number of bytes in the file.

**1f**: Create a duplicate of the file to another file called `my_name2.txt` using the `cp` command.

**1g**: Create a folder named `people` using the `mkdir` command.

**1h**: Move `my_name2.txt` into `people`, where the file name will be `<<YOUR-NAME>>.txt` with `<<YOUR-NAME>>` being your first and last name without white space using `_`. For this use the `mv` command.

**1i**: Using the same thing you did in **1c**, create three additional files of peoples names in the folder `people`.

**1g**: Change directory into `people`. Now Use `mv` to move one of the people files back into `hw2_q1`. Use `..` (double dot).

**1k**: Move another file back into `hw2_q1`, but now use an absolute path to describe the destination folder.

**1l**: Copy one of the files in people into a file name starting with `.` (single dot as prefix). For example if the file name was `marie_curie.txt`, copy it into `.marie_curie.txt`. 

**1m**: Show all the files in the directory (also showing `.marie_curie.txt`), where you also see the size of the files and other information. Use the correct flag(s) for `ls` to show hidden files.

**1n**: Delete all the files in the directory using a single command. Please be very careful when deleting files! 

**1o**: Move back to `hw1_q1` and delete the directory `people`. Use either `rm` with a correct flag or `rmdir`.



## Question 2 (15pt): HTTP, Files, JSON, and CSV

Inspect the Jupyter notebook file for [practical B](https://github.com/yoninazarathy/ProgrammingCourse-with-Julia-SimulationAnalysisAndLearningSystems/blob/main/practicals_jupyter/practical_B_julia_essentials.ipynb), `practical_B_julia_essentials.ipynb`. The source URL is available by clicking "Raw" on the GitHub page. It is in JSON format.

Write a program that reads in the JSON file (directly from the web) of the Jupyter notebook and prints a summary of the notebook including:

* Total number of cells.
* Number of code cells.
* Number of markdown cells.
* A breakdown of the number of code cells to cells that have output and those that don't.
* Any other summary information you find relevant (you choose what summary to print - must be at least one item).

The program should then create two CSV files, both with header rows and named `markdown_summary.csv` and `code_summary.csv`. Both of these files should contain a data row for each respective markdown or code cell in the notebook. The first column in each of the files should be named `cell_number` and should indicate the cell number in the Jupyter notebook (this is a unique count starting at 1 within the cells). The second and third columns are:

* `character_count` - determines how many characters total are in the cell (include characters such as `\n` and count unique characters as a single character. E.g. `√` is a single character.
* `line_count` - The number of lines the cell uses.

The remaining columns count frequency of elements within the markdown or code of the cell. These columns will differ for `markdown_summary.csv` and `code_summary.csv`, and are descrbied now.

For the markdown summary file create columns: `#`, `##`, `###`, `####`, each of which count the number of times the respective element appears in the cell. For example if a cell has `#` and `##` in it, each once, then the respective entries in the line for this cell should be `1, 1, 0, 0`.

For the code summary CSV file do so similarly, for the keywords: `return`, `for`, `if`, and `using` (i.e. 4 columns, counting the frequency of these keywords in each of the code cells).

Thus in summary, your program reads in a JSON file representing a Jupyter notebook, displays basic summary information, and then stores additional information to two CSV files which in principle could be further analyzed at a later time. 

(Your PDF output for the assignment should show the first few lines of these CSV files).

## Question 3 (10pt): Numerical derivatives

The lecture notes contain code that illustrates the absolute relative error (as a function of $h$) for numerical derivatives using the **forward difference scheme**,

$$
f'(x) \approx \frac{f(x+h) - f(x)}{h}.
$$

An alternative scheme is **the central difference scheme** using,

$$
f'(x) \approx \frac{f(x+h/2) - f(x-h/2)}{h}.
$$

Yet another scheme, called the **Complex Variable Method**, is overviewed in [this video](https://www.youtube.com/watch?v=Q9OLOqEhc64&t=134s) (the link is to 2:15 in the video and you should watch for about 4.5 minutes). 

Consider the functions, $f_1(x) = sin(x^2)$ at $x=1/2$, $f_2(x) = e^x$ at $x=1$, and $f_3(x) = atan(x)/(1+e^{-x^2})$ at $x=2$. Evaluate the performance of each of the three schemes (forward, central, and complex) for each of these functions at the given points. In each case plot the error as a function of $h$, and find the optimal $h$. Display your results in a neat manner using one or two plots and a minimal summary.

## Question 4 (15pt): Markov chains and `LinearAlgebra`

A discrete time, time-homogenous, finite state markov chain can be defined as a random sequence $X_0,X_1,X_2,\ldots$ where $X_i \in \{1,2,\ldots,L\}$ with $L$ being the number of states, and where the probability of $X_{n+1} = j$ given that $X_n = i$ is determined by the element $P_{ij}$ of the (stochastic) matrix $P$. This is an $L \times L$ matrix with non-negative entries and, $\sum_{j=1}^L P_{ij} = 1$ for all $i \in \{1,\ldots,L\}$. Hence each row $i$ of the matrix is the probability distribution of the next value in the sequence in case where the current value is $i$. An initial probability of $X_0$ is also given via some vector $p^0$ where $p^0_i = {\mathbb P}(X_0 = i)$. 

Markov chains are very useful models for a variety of applications and at UQ are briefly introduced in [STAT2003](https://my.uq.edu.au/programs-courses/course.html?course_code=STAT2003) and studied in detail in [STAT3004](https://my.uq.edu.au/programs-courses/course.html?course_code=STAT3004). Here we will simply use them as a motivating example for practicing using linear algebra and no further background from these courses is needed.

We focus on irreducible, aperiodic, finite state Markov chains. Irreducible means that for every pair $(i,j)$ there exists an $n$ such that $i$-th $j$-th entry of the matrix power $P^n$ is non-negative. Aperiodic is guarnteed when the diagonal entries of $P$ are strictly positive. Ireeducibility means that every state $\{1,\ldots,L\}$ is reachable from every other state and being aperiodic implies there aren't times $n$ where only a subset of the states can be visited. For such Markov chains, one important vector quantity is the **stationary probability** (row) $L$-vector. Here it is denoted $\pi$ with $\sum_{i=1}^L \pi_i =1$ and $\pi_i>0$ for every $i$. This vector $\pi$ counts the long term statistical occupancy of states, and can be characterized/computed in several ways:

1. It satisfies $\pi P = \pi$ (note that this is an undetermined system of linear equations because $(I-P)$ is singular; still the additional requirement that $\sum_{i=1}^L \pi_i =1$ ensures uniqueness of $\pi$).
1. For any $i$,
$$
\lim_{n \to \infty} [P^n]_{ij} = \pi_j.
$$
3. The theory of non-negative matrices implies that $P$ has a a real eigenvalue equal to $1$. This is the eigenvalue with maximal magnitude among all eigenvalues of $P$. The vector $\pi$ is proportional to the eigenvector associated with this maximal eigenvalue ($\sum_{i=1}^L \pi_i =1$).
1. Given a sequence of random variables from this Markov chain $\{X_0,X_1,X_2,\ldots\}$ we estimate $\pi_i$ for large $N$ via,
$$
\pi_i \approx \frac{1}{n} \sum_{n=1}^N {\mathbf 1} \{X_n = i\}, 
$$
where ${\mathbf 1}\{\cdot\}$ is the indicator function equalling $1$ if the argument occurs, and $0$ otherwise. This is true for any initial probability vector $p^{0}$.

In this problem you will compute/estimate $\pi$ using methods 1-4 for a specific class of problems.

The code below generates a very special class of Markov chains where there is an explicit expression for the stationary probability vector $\pi$. The function `structured_P` with input argument `L` creates and $L \times L$ matrix $P$ and the function `structured_π` creates an $L$-vector (column vector) $\pi$ matching this $P$:

```julia
using LinearAlgebra

function structured_P(L::Int; p::Float64 = 0.45, r::Float64 = 0.01)::Matrix{Float64}
    q = 1 - p - r
    P = diagm(fill(r,L)) + diagm(-1=>fill(q,L-1)) + diagm(1 => fill(p,L-1))
    P[1,1] = 1-p
    P[L,L] = 1-q
    return P
end

structured_π(L::Int; p::Float64 = 0.45, r::Float64 = 0.01)::Vector{Float64} = begin
    q = 1 - p - r
    [(p/q)^i  for i in 1:L] * (q-p) / p / (1-(p/q)^L) #Explicit expression (birth death)
end;
```

Here is for example the matrix $P$ for $L=5$:
```julia
P = structured_P(5)
```

And here is the vector $\pi$ for $L=5$:

```julia
π = structured_π(5)
@show sum(π)
@show sum(π) ≈ 1.0 #\approx + [TAB]
π  
```

We can see that it is a stationary distribution:

```julia
@show norm(π'*P - π')
π'*P ≈ π' 
```

You will now consider $L=2,3,4,5,10,20,30,40,50,100,200,300,400,500,1000$ and in each case use methods 1-4 above to compute/estimate $\pi$. Create 4 functions, one for each method and in each case use the function to compute/estimate $\pi$ and compare your estimated vector with the output of `structured_π`. Note that methods 1-3 will use functions from [LinearAlgebra](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/) while method 4 requires random variable generation. You may make use of [`sample` from StatsBase.jl](https://juliastats.org/StatsBase.jl/stable/sampling/#StatsBase.sample) for this, or any other means. You may choose for how many steps to run the Markov Chain ($N$). Similarly, since the second method requires you take take matrix powers $P^n$ for high $n$, you may also choose which $n$ to use.

Once your code works for the four methods, create some graphic or tabular output of your choice (one or two plots at most) which evaluates performance of each of the methods in terms of accuracy (and optional: running time). To measure accuracy use the `norm` function to compute the euclidean norm between your calcuated $\pi$ and that arising from the explicit solution `structured_π`.

## Question 5 (15pt): Planetary Motion - Part 1

To be updated.

## Question 6 (15pt): Planetary Motion - Part 2

To be updated.





