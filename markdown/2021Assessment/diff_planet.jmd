The two body problem reduces to 2 one body problems. A trivial one for the barycentre
and a second order differential equation for the orbit around the centre of mass. 
It can be shown that these solutions are conic sections (ellipse, parabola and hyperbolic).
Equivalently we can just look at a test mass orbiting a much larger mass (a reasonable approx 
to the earth around the sun).

From Newtons Law

m * a = F(r)

The gravitational force is given by (a 1/r potential)

F(r) = -m*M*G*r'/|r|^2

where 

|r|^2 is the distance squared to the barycentre
r' is a unit vector pointing at the barycentre

a = -M*G*r'/(r^2)

We can show that Total energy is conserved in this system

E = KE + PE

where 

KE ∝ v^2

PE ∝ -1/r

In cartesian coordinates

|r| = sqrt(x^2 + y^2)

r' = x/|r|*i + y/|r|*j

a = d^2x/dt^2 * i + d^2y/dt^2 * j

Therefore

get a system of odes


d^2x/dt^2 = -M*G*x/|r|^(3)

d^2y/dt^2 = -M*G*y/|r|^(3)


As a state space model (system of first order equations). Use vx = dx/dt, vy = dy/dt

dvx/dt = -M*G*x/|r|^(3)

dvy/dt = -M*G*y/|r|^(3)

dx/dt = vx

dy/dt = vy

Which is a form suitable for numerical methods

=#

```julia

using Plots

function df_dt_one_body(x, t)
    #say the layout of the vector x is x = [vx, vy, x, y]
    #M = 2e30 #FIXME: !!!! Think about scaling!!! This problem is silly to do in SI units
    #G = 6.67e-11
    M = 1
    G = 1
    r = sqrt(x[3]^2 + x[4]^2)
    return [-M*G*x[3]/r^3, -M*G*x[4]/r^3, x[1], x[2]]
end

function dv_dt_one_body(x,t)
    #M = 2e30 #FIXME: !!!! Think about scaling!!! This problem is silly to do in SI units
    #G = 6.67e-11
    M = 1
    G = 1
    r = sqrt(x[1]^2 + x[2]^2)
    return [-M*G*x[1]/r^3, -M*G*x[2]/r^3]
end

function euler_ode(f, x0, t)
    # dx/dt ≈ (x[t[i+1]] - x[t[i]])/(t[i+1] - t[i])
    # if dx/dt = f[t]
    # x[t+1] ≈  x[t[i]] + dt*f 
    x = fill(zeros(length(x0)), length(t))
    x[1] = x0
    for i = 2:length(t)
        dt = t[i] - t[i-1]
        x[i] = x[i-1] + dt*f(x[i-1], t[i-1])
    end
    return x
end

function rk4_ode(f, x0, t)
    n = length(t)
    x = fill(zeros(length(x0)), length(t))
    x[1] = x0
    for i in 2:n
        h = t[i] - t[i-1]
        k1 = f(x[i-1], t[i-1])
        k2 = f(x[i-1] + k1 * h/2, t[i-1] + h/2)
        k3 = f(x[i-1] + k2 * h/2, t[i-1] + h/2)
        k4 = f(x[i-1] + k3 * h, t[i-1] + h)
        x[i] = x[i-1] + (h/6) * (k1 + 2*k2 + 2*k3 + k4)
    end
    return x
end

function leapfrog(fv,x0,v0,t)
    #"kick-drift-kick" leapfrog for variable time steps
    n = length(t)
    x = fill(zeros(length(x0)), length(t))
    v = fill(zeros(length(v0)), length(t))
    x[1] = x0
    v[1] = v0
    for i in 2:n
        h = t[i] - t[i-1]
        v1_2 = v[i-1] + fv(x[i-1], t[i-1])*h/2
        x[i] = x[i-1] + v1_2*h 
        v[i] = v1_2 + fv(x[i], t[i])*h/2
    end
    return x, v
end

#initial condition (should give a circle of radius 1)
x0 = [0., 1, 1, 0]

#try a few diffrent dts and see what happens to eulers method

t = 0:0.00001:110

x = euler_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

p1 = plot(xs, ys, label = "dt = 0.00001", title = "Euler's Method (position)")

p4 = plot(t, E, label = "dt = 0.00001", title = "Euler's Method (energy)")

#coarse dt

t = 0:0.001:110

x = euler_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p1, xs, ys, label = "dt = 0.001")
plot!(p4, t, E, label = "dt = 0.001")

#coarser dt

t = 0:0.1:110

x = euler_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p1, xs, ys, label = "dt = 0.1")
plot!(p4, t, E, label = "dt = 0.001")

#now check rk4 method

t = 0:0.001:110

x = rk4_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

p2 = plot(xs, ys, label = "dt = 0.001", title = "RK4 Method (position)")
p5 = plot(t, E, label = "dt = 0.001", title = "RK4 Method (energy)")

#coarse dt

t = 0:0.1:110

x = rk4_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p2, xs, ys, label = "dt = 0.1")
plot!(p5, t, E, label = "dt = 0.1")

#coarser dt

t = 0:0.5:110

x = rk4_ode(df_dt_one_body, x0, t)

xs = [xx[3] for xx in x]
ys = [xx[4] for xx in x]
vxs = [xx[1] for xx in x]
vys = [xx[2] for xx in x]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p2, xs, ys, label = "dt = 0.5")
plot!(p5, t, E, label = "dt = 0.5")

#now check leapfrog method

t = 0:0.001:110

x,v = leapfrog(dv_dt_one_body, x0[3:4], x0[1:2], t)

xs = [xx[1] for xx in x]
ys = [xx[2] for xx in x]
vxs = [xx[1] for xx in v]
vys = [xx[2] for xx in v]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

p3 = plot(xs, ys, label = "dt = 0.001", title = "Leapfrog Method (position)")
p6 = plot(t, E, label = "dt = 0.001", title = "Leapfrog Method (energy)")

#coarse dt

t = 0:0.1:110

x,v = leapfrog(dv_dt_one_body, x0[3:4], x0[1:2], t)

xs = [xx[1] for xx in x]
ys = [xx[2] for xx in x]
vxs = [xx[1] for xx in v]
vys = [xx[2] for xx in v]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p3, xs, ys, label = "dt = 0.1")
plot!(p6, t, E, label = "dt = 0.1")

#coarser dt

t = 0:0.5:110

x,v = leapfrog(dv_dt_one_body, x0[3:4], x0[1:2], t)

xs = [xx[1] for xx in x]
ys = [xx[2] for xx in x]
vxs = [xx[1] for xx in v]
vys = [xx[2] for xx in v]

#"Energy"
r = sqrt.(xs.^2 .+ ys.^2)
E = vxs.^2 .+ vys.^2 - 1.0 ./ r

plot!(p3, xs, ys, label = "dt = 0.5")
plot!(p6, t, E, label = "dt = 0.5")

p_position = plot(p1,p2,p3)
p_energy = plot(p4,p5,p6)

plot(p_position, p_energy)
```
