# Unit 1: Basics

To introduce things say you have an array of values and want to find the maximal value. How would you do it? Here is some Julia code:

<!---
Before anything - a 10-20 minute demo.... e.g. expected number of findings of minimum when searching through an array.... or Resvouir sampling
--->
```julia
using Random

function find_max(data)
    max_value = -Inf
    for x in data
        if x > max_value
            max_value = x
        end
    end
    return max_value
end

Random.seed!(0)
data = rand(100)
max_value = find_max(data)
println("Found maximal value: $(max_value)")
```

**Here is a question**: How many times was a new maximum found?

Let's count.

```julia
using Random

function find_max(data)
    max_value = -Inf
    n = 0
    for x in data
        if x > max_value
            n = n+1
            max_value = x
        end
    end
    return max_value, n
end

Random.seed!(0)
data = rand(100)
max_value, n = find_max(data)
println("Found maximal value: $(max_value)")
println("There were $n records along the way.")
```

But for different data (different seed) there is obviously possibiliy a different number of records...

```julia
Random.seed!(1)
data = rand(100)
max_value, n = find_max(data)
println("Found maximal value: $(max_value)")
println("There were $n records along the way.")
```

How many on average? Denote the number of records for $n$ data points by $X_n$ then,
$$
X_n = I_1 + I_2 + \ldots + I_n,
$$
where,
$$
I_i =
\begin{cases}
1 & \text{if}~i~\text{'th data point is a record}, \\
0 & \text{otherwise}.
\end{cases}
$$
Now,
$$
{\mathbb E}[X_n] = {\mathbb E}[I_1] + {\mathbb E}[I_2] + \ldots + {\mathbb E}[I_n]. 
$$
Observe that ${\mathbb E}[I_i] = {\mathbb P}(I_i = 1)$ and for statistically independent and idenitcally distributed data points we have,
$$
{\mathbb P}(I_i = 1) = \frac{1}{i},
$$
why? Hence,
$$
{\mathbb E}[X_n] = h_n = \sum_{i=1}^n \frac{1}{i},
$$
the harmonic sum. It is known that
$$
h_n = \log(n) + \gamma + o(1),
$$
where $\gamma$ is the [Euler–Mascheroni constant](https://en.wikipedia.org/wiki/Euler%E2%80%93Mascheroni_constant). That is 
$$
h_n \approx \log(n) + \gamma.
$$
Let's see it...
```julia
using Plots

println("γ = ",Float64(MathConstants.γ))  #\gamma + [TAB]

h(n) = sum(1/i for i in 1:n)
approx_h(n) = log(n) + MathConstants.γ

for n in 1:10
    println(n, "\t", h(n), "\t", approx_h(n) )
end

err = [h(n) - approx_h(n) for n in 1:20]

scatter(1:20,err,xticks=1:20,xlabel="n",ylabel = "Error",ylim = (0,0.5), legend=false)
```

Here is a Monte Carlo estimate,
```julia
using Statistics

records = []

for s in 1:10^5
    Random.seed!(s)
    data = rand(100)
    _, n = find_max(data)
    push!(records,n)
end
println("log(100) + γ =  $(approx_h(100)), Monte Carlo Estimate: $(mean(records))")

histogram(records,ticks = 1:maximum(records),normed=true,xlabel="n",ylabel="probability",legend=false)
```

## Premeble (before really coding)

### What you "already know"

* Python scripting
* MATLAB scripting
* R scripting
* Files, computer, internet
* Mathematics at level of STAT1301 (first year stats), MATH1071 (Analysis + Linear Algebra) + MATH1072 (Mutivariable Calculus + some modelling) + More math electives 

### What is a computer?

* Turing + tape? Finite Automata? Von-Neuman architecture.
* CPU, Memory, RAM, (ROM used to be a term), Disk, Operating system....
* Running batch things, running responsive.
* Software vs. Hardware..... 
* History... (Turing, Ada, etc...)

### The culture of software development and Who is a programmer?

* "code is read more than it is written"....
* Big complaint of software engineers interacting with mathematicians is "black box of code that isn't easy to follow".
* In academia, code is an artifact of research and isn't the work itself.
* If code was written like paper, many practionars would be happier...
* Diverse teams...

### Bits, bytes, hex, binary, and the works...

* Bits and bytes.
* Binary, hex, and arithmetic.
* Shift left/shift right, ones complement
* Mega bit per sec /vs. Mega byte   rates memory.... 

## Julia from the ground up

### Extended Hello world (0'th story)

* Julia as a language (+community, history, motivation, etc...)
* Running from A file in command line. 
* REPL
* Jupyter (more on Jupyter a bit below...)
* Already have something simple in there with an array and a comprehnsion and broadcasting  [example code](https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/helloWorld.jl)

### Square root (the 1'st story)

* Basics
* Variables (also complex types)
* Types (basic story about types)
* Many methods for the one function
* The Babilonian algorithm 
* Broadcasting as well
* The "quakeIII" algorithm for the receiprocal of square root a Float32 

<iframe width="560" height="315" src="https://www.youtube.com/embed/p8u_k2LIZyo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### Factorial (the 2'nd story)
* Basics
* Recursion
* BigInts
* The Gamma function
* Accuracy of the Stirling approximation (will use arrays also for plotting)
    
### Something with language and strings (the 3'rd story)
* Frequency counting in a corpus.
* Something a bit smarter after a bit.
* Discuss ASCII, Unicode...
