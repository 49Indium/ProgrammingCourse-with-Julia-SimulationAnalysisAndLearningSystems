# Unit 4: More language features for software architecture

Someplace here: The "declarative language paradigm" (SQL as an example) - contrasting with "the imperative language". (side note on functional programming COMP3400).


## Motivations from Algebra

```julia
using SymPy
x = symbols("x")		       # or  @syms x
y = sin(pi*x)
y(1)                           # Does y.subs(x, 1). Use y(x=>1) to be specific as to which symbol to substitute
```

### Existing Software

* Symoblic mathematics in general overview (Maple, Mathematica, Magma, more rigourous systems...)
* Usage of an existing package in Julia - example (Symbolics.jl / SimPy.jl.....)

### Some Basic Problems/Goals and Objects

* Rational numbers represenation
* Polynomial Representation
* Example: Bitpacking example/discussion...  

## Types and the Type System

### Julia types

Everything has a type.

```julia
@show typeof(2.3)

x = 2.3f0
@show typeof(x)

x = 2
@show typeof(x)

x = 23//10
@show typeof(x)

x = 2 + 3im
@show typeof(x)

x = 2.0 +3im
@show typeof(x)

x = "Hello!"
@show typeof(x)

x= [1,2,3]
@show typeof(x)

x = [1,2,3.0]
@show typeof(x)

x = [1.0,2,"three"]
@show typeof(x)

x = 1:3
@show typeof(x)

x = [1 2; 3 4]
@show typeof(x)

x = Float64
@show typeof(x)

x = :Hello
@show typeof(x);

```

There is a type hierarchy.
 * Julia in-built types and the type hierarachy

```julia
x = 2.3
@show typeof(x)
@show supertype(Float64)
@show supertype(AbstractFloat)
@show supertype(Real)
@show supertype(Number);
@show supertype(Any);
```

Let's walk down from `Number`
```julia
using InteractiveUtils: subtypes

function type_and_children(type,depth::Int = 0)
    if !isconcretetype(type)
        println("-"^depth, type, " - non-concrete", isabstracttype(type) ? ", abstract" : ", non-abstract")
        for c in subtypes(type)
            type_and_children(c,depth+1)
        end
    else
        println("-"^depth, type, " - concrete")
        end
end

type_and_children(Number)
println()
```

* mutability 

```julia
x = 7
@show ismutable(x)

x = [7]
@show ismutable(x);
```


 * User defined types

```julia
struct Person
    height::Float64
    weight::Float64
    name::String
end

person = Person(184.3,87.2,"Jessica")

@show typeof(person)

@show person.height;
@show person.weight;
@show person.name;

```

```julia
@show ismutable(person)
person1.weight = 85.4 #lost some weight - but this will generate and error
```

```julia
mutable struct MutablePerson
    height::Float64
    weight::Float64
    name::String
end

person = MutablePerson(184.3,87.2,"Jessica")
person.weight = 85.4 #lost some weight

println(person)
```

 * Mutable and immutable types
 * Constructors (without the nuiencens of inner vs. outer etc... at this point).
 * Discussion of what you would see in terms of types in other languages

 ### Multiple Dispatch

* The idea of multiple dispatch (functions and methods) - and how it allows to create generalized code


 * Multiple dispatch

QQQQ - More work here....


 Goal: [Case Study of Rational](https://docs.julialang.org/en/v1/manual/constructors/#Case-Study:-Rational)


### More on User Defined Types

 multiple dispatch
 defining structures
 designing types
 mutability


## Some More Datastrcutures

### Dictionaries and Hash

* Dictionaries and Julia `Dict()` from a user perspective.
* Hash tables (example implementation).
* More dicussion hash functions (and other applications in computer science).

### Heaps 

* The heap data structure
* Analytic analysis of heaps, O(log n) insert, etc... "heapify"
* Mathematical analysis of performance
* Data representation (dangled vs. in an array...)
* Using a heap object (from a package)...
